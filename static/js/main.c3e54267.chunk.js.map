{"version":3,"sources":["components/LaneViewer.tsx","components/PoolViewer.tsx","assets/ymcalogo.svg","components/PoolNavbar.tsx","components/PoolSchedule.tsx","components/PoolFormViewer.tsx","components/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LaneViewer","lane","setLane","Row","Col","Card","bg","isSwimTeam","style","width","text","toLowerCase","Body","laneIndex","actualSwimmers","xs","Button","variant","size","onClick","PoolViewer","pool","setPool","useState","LANES","isSummer","todayDate","Date","todayDateNum","getTime","getFullYear","numberOfLanes","lanes","push","length","Title","pop","PoolNavbar","Navbar","Container","Brand","href","alt","src","Logo","height","className","Nav","Link","target","PoolSchedule","title","frameBorder","PoolFormViewer","poolForm","setPoolForm","temp","setTemp","chlor","setChlor","pH","setpH","Form","Group","controlId","Label","Control","type","placeholder","value","onChange","ev","parseInt","temperature","chlorine","ph","time","Dashboard","border","JSON","stringify","App","first","last","totalSwimmers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3e54267.chunk.js","sourcesContent":["import { Lane } from \"../interfaces/lane\";\r\nimport { Col, Row, Card, Button } from \"react-bootstrap\";\r\nimport React, { useEffect } from \"react\";\r\n\r\n/**\r\n * Creates a single pool lane and the associated color and text to generate\r\n * inside\r\n * @param lane Lane object\r\n * @param setLane hook function that sets the updated lane\r\n *\r\n * @returns A JSX.Element containing a single instance of a pool lane\r\n */\r\nexport function LaneViewer({\r\n  lane,\r\n  setLane,\r\n}: {\r\n  lane: Lane;\r\n  setLane: (l: Lane) => void;\r\n}): JSX.Element {\r\n  /**\r\n   * Determines the text that will display inside each lane line based off of how\r\n   * many swimmers are in the pool, how many swimers are expected, and if swim\r\n   * team is using the lane.\r\n   *\r\n   * @returns The text to be put inside the lane card component\r\n   */\r\n  function laneText(): string {\r\n    if (lane.isSwimTeam) {\r\n      return \"Lane \" + (lane.laneIndex + 1) + \" | Swim Team\";\r\n    } else {\r\n      return (\r\n        \"Lane \" +\r\n        (lane.laneIndex + 1) +\r\n        \" | Open Lap Lane | Current Swimmers: \" +\r\n        lane.actualSwimmers\r\n      );\r\n    }\r\n  }\r\n\r\n  function toggleSwimTeam() {\r\n    lane.isSwimTeam = !lane.isSwimTeam;\r\n    lane.actualSwimmers = 0; //set to zero bc assumption is everyone gets out\r\n    setLane({ ...lane });\r\n  }\r\n\r\n  function toggleCurrentSwimmersUp() {\r\n    lane.actualSwimmers++;\r\n    setLane({ ...lane });\r\n  }\r\n\r\n  function toggleCurrentSwimmersDown() {\r\n    if (lane.actualSwimmers > 0) {\r\n      lane.actualSwimmers--;\r\n    } else {\r\n    }\r\n    setLane({ ...lane });\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Col>\r\n        <Card\r\n          bg={lane.isSwimTeam ? \"danger\" : \"success\"}\r\n          style={{ width: \"32rem\" }}\r\n          text={\r\n            (lane.isSwimTeam ? \"danger\" : \"success\").toLowerCase() === \"light\"\r\n              ? \"dark\"\r\n              : \"white\"\r\n          }\r\n        >\r\n          <Card.Body> {laneText()} </Card.Body>\r\n        </Card>\r\n      </Col>\r\n      <Col>\r\n        <Card bg=\"dark\">\r\n          <Col xs=\"auto\">\r\n            <Button\r\n              variant=\"primary\"\r\n              size=\"sm\"\r\n              onClick={() => toggleSwimTeam()}\r\n            >\r\n              Toggle Swim Team {lane.isSwimTeam ? \"OFF\" : \"ON\"}\r\n            </Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <Button\r\n              variant=\"success\"\r\n              size=\"sm\"\r\n              onClick={() => toggleCurrentSwimmersUp()}\r\n            >\r\n              Add Swimmer\r\n            </Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <Button\r\n              variant=\"danger\"\r\n              size=\"sm\"\r\n              onClick={() => toggleCurrentSwimmersDown()}\r\n            >\r\n              Remove Swimmer\r\n            </Button>\r\n          </Col>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { Pool } from \"../interfaces/pool\";\r\nimport { Lane } from \"../interfaces/lane\";\r\nimport { Col, Row, Card } from \"react-bootstrap\";\r\nimport { LaneViewer } from \"./LaneViewer\";\r\nimport LANES from \"../assets/poolDefault.json\";\r\n\r\n/**\r\n * Creates an entire pool and the associated lanes and buttons inside\r\n *\r\n * @param pool Pool object\r\n * @param setPool hook function that sets the updated pool\r\n *\r\n * @returns A JSX.Element containing a single instance of a pool\r\n */\r\nexport function PoolViewer({\r\n  pool,\r\n  setPool,\r\n}: {\r\n  pool: Pool;\r\n  setPool: (p: Pool) => void;\r\n}): JSX.Element {\r\n  const [lane, setLane] = useState<Lane>(LANES[0] as Lane);\r\n\r\n  /**\r\n   * Takes the date, calculates the milliseconds since the new year, and\r\n   * determines if it is summer pool season or not (i.e. if the 10 lane outdoor\r\n   * pool or 8 lane Bubble pool is open)\r\n   *\r\n   * @returns If the pool season is \"summer\" or not\r\n   */\r\n  function isSummer(): boolean {\r\n    let todayDate: Date = new Date();\r\n    let todayDateNum: number = todayDate.getTime();\r\n\r\n    if (\r\n      new Date(todayDate.getFullYear(), 4, 24).getTime() <= todayDateNum &&\r\n      new Date(todayDate.getFullYear(), 9, 3).getTime() >= todayDateNum\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  if (isSummer()) {\r\n    if (pool.numberOfLanes === 8) {\r\n      pool.lanes.push();\r\n      pool.lanes.push();\r\n      pool.numberOfLanes = pool.lanes.length;\r\n      setPool(pool);\r\n    }\r\n    return (\r\n      <Card bg=\"dark\" text=\"white\">\r\n        <Card.Title>Western YMCA 8-Lane Pool</Card.Title>\r\n        <LaneViewer lane={pool.lanes[0]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[1]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[2]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[3]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[4]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[5]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[6]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[7]} setLane={setLane}></LaneViewer>\r\n      </Card>\r\n    );\r\n  } else if (!isSummer() && pool.numberOfLanes === 10) {\r\n    if (pool.numberOfLanes === 10) {\r\n      pool.lanes.pop();\r\n      pool.lanes.pop();\r\n      pool.numberOfLanes = pool.lanes.length;\r\n      setPool(pool);\r\n    }\r\n    return (\r\n      <Card bg=\"dark\">\r\n        <Card.Title>Western YMCA 10-Lane Pool</Card.Title>\r\n        <LaneViewer lane={pool.lanes[0]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[1]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[2]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[3]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[4]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[5]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[6]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[7]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[8]} setLane={setLane}></LaneViewer>\r\n        <LaneViewer lane={pool.lanes[9]} setLane={setLane}></LaneViewer>\r\n      </Card>\r\n    );\r\n  } else {\r\n    return <div>[Pool Render not loading]</div>;\r\n  }\r\n  /** \r\n   *   pool.lanes.map(\r\n    (lane: Lane, laneIndex: number): JSX.Element => (\r\n      <LaneViewer\r\n        lane={pool.lanes[laneIndex - 1]}\r\n        setLane={setLane}\r\n      ></LaneViewer>\r\n    )\r\n  );\r\n  */\r\n\r\n  /** after many long hours trying to use maps to dynamically render the pool,\r\n   * I've decided to cop out and hard code it\r\n   */\r\n}\r\n","export default __webpack_public_path__ + \"static/media/ymcalogo.5f3d39db.svg\";","import { Container, Navbar, Nav } from \"react-bootstrap\";\r\nimport Logo from \"../assets/ymcalogo.svg\";\r\nimport \"../css/poolNavbar.css\";\r\n\r\nexport function PoolNavbar(): JSX.Element {\r\n  return (\r\n    <Navbar bg=\"primary\" variant=\"dark\">\r\n      <Container>\r\n        <Navbar.Brand href=\"#pool\">\r\n          <img\r\n            alt=\"YMCA Logo\"\r\n            src={Logo}\r\n            width=\"60px\"\r\n            height=\"60px\"\r\n            className=\"img-responsive\"\r\n          />\r\n          {\"\"}\r\n          YMCA of Delaware Lane Availability\r\n        </Navbar.Brand>\r\n        <Nav className=\"me-auto\">\r\n          <Nav.Link href=\"#pool\">\r\n            <strong>Pool Diagram</strong>\r\n          </Nav.Link>\r\n          <Nav.Link href=\"#schedule\">\r\n            <strong>Pool Schedule</strong>\r\n          </Nav.Link>\r\n        </Nav>\r\n        <Nav.Link\r\n          className=\"ymca-link\"\r\n          href=\"https://www.ymcade.org/\"\r\n          target=\"_blank\"\r\n        >\r\n          <strong>YMCA Website</strong>\r\n        </Nav.Link>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n","import { Col } from \"react-bootstrap\";\r\n\r\n/**\r\n * Simply obtains the entire Western YMCA schedule (which includes the pool\r\n * schedule) for members to referance when viewing the app\r\n *\r\n * @returns A JSX element representing the imported iframe YMCA schedule\r\n */\r\nexport function PoolSchedule(): JSX.Element {\r\n  return (\r\n    <Col>\r\n      <a href=\"#endregion\">\r\n        <iframe\r\n          title=\"Western Family YMCA Pool Schedule\"\r\n          src=\"https://members.daxko.com/10009?branchId=3ba37a66ae8a4da0ac087b854816bebe\"\r\n          frameBorder=\"0\"\r\n          width=\"100%\"\r\n          height=\"750px\"\r\n        ></iframe>\r\n      </a>\r\n    </Col>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Card, Button, Form } from \"react-bootstrap\";\r\nimport { PoolForm } from \"../interfaces/poolForm\";\r\n\r\n/**\r\n * Creates a pool form\r\n *\r\n * Template taken from 'https://react-bootstrap.github.io/components/forms/'\r\n *\r\n *\r\n * @returns A JSX.Element containing a single instance of a chemical form\r\n */\r\nexport function PoolFormViewer({\r\n  poolForm,\r\n  setPoolForm,\r\n}: {\r\n  poolForm: PoolForm;\r\n  setPoolForm: (pf: PoolForm) => void;\r\n}): JSX.Element {\r\n  const [temp, setTemp] = useState<number>(0);\r\n  const [chlor, setChlor] = useState<number>(0);\r\n  const [pH, setpH] = useState<number>(0);\r\n\r\n  function submitForm() {\r\n    poolForm.temperature = temp;\r\n    poolForm.chlorine = chlor;\r\n    poolForm.ph = pH;\r\n    poolForm.time = new Date();\r\n    setPoolForm({ ...poolForm });\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <Form>\r\n        <Form.Group className=\"mb-3\" controlId=\"formTemp\">\r\n          <Form.Label>Temperature (°C)</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter temperature\"\r\n            value={temp}\r\n            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) =>\r\n              setTemp(parseInt(ev.target.value))\r\n            }\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"formChlor\">\r\n          <Form.Label>Chlorine (ppm)</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter Chlorine\"\r\n            value={chlor}\r\n            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) =>\r\n              setChlor(parseInt(ev.target.value))\r\n            }\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"formpH\">\r\n          <Form.Label>pH</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter pH\"\r\n            value={pH}\r\n            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) =>\r\n              setpH(parseInt(ev.target.value))\r\n            }\r\n          />\r\n        </Form.Group>\r\n\r\n        <Button variant=\"primary\" type=\"submit\" onClick={() => submitForm()}>\r\n          Update App\r\n        </Button>\r\n      </Form>\r\n    </Card>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { Col, Row, Card, Button } from \"react-bootstrap\";\r\nimport { Pool } from \"../interfaces/pool\";\r\nimport { LaneViewer } from \"./LaneViewer\";\r\nimport { Lane } from \"../interfaces/lane\";\r\nimport { PoolForm } from \"../interfaces/poolForm\";\r\nimport { PoolFormViewer } from \"./PoolFormViewer\";\r\n\r\nexport function Dashboard({\r\n  pool,\r\n  poolForm,\r\n  setPoolForm,\r\n}: {\r\n  pool: Pool;\r\n  poolForm: PoolForm;\r\n  setPoolForm: (pf: PoolForm) => void;\r\n}): JSX.Element {\r\n  return (\r\n    <Card border=\"primary\">\r\n      <Card.Title>\r\n        <h1>\r\n          <strong>Dashboard</strong>\r\n        </h1>\r\n      </Card.Title>\r\n      <Row>\r\n        <Card bg=\"dark\" text=\"white\">\r\n          <Col>\r\n            <h2>Temperature: {poolForm.temperature}</h2>\r\n          </Col>\r\n          <Col>\r\n            <h2>Chlorine: {poolForm.chlorine}</h2>\r\n          </Col>\r\n          <Col>\r\n            <h2>pH: {poolForm.ph}</h2>\r\n          </Col>\r\n          <Col>\r\n            <h2>Time of last update: {JSON.stringify(poolForm.time)}</h2>\r\n          </Col>\r\n        </Card>\r\n      </Row>\r\n      <Row>\r\n        <PoolFormViewer\r\n          poolForm={poolForm}\r\n          setPoolForm={setPoolForm}\r\n        ></PoolFormViewer>\r\n      </Row>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport LANES from \"./assets/poolDefault.json\";\r\nimport { PoolViewer } from \"./components/PoolViewer\";\r\nimport { Pool } from \"./interfaces/pool\";\r\nimport { PoolNavbar } from \"./components/PoolNavbar\";\r\nimport { PoolSchedule } from \"./components/PoolSchedule\";\r\nimport { Dashboard } from \"./components/Dashboard\";\r\nimport { PoolForm } from \"./interfaces/poolForm\";\r\n\r\nfunction App() {\r\n  const [pool, setPool] = useState<Pool>({\r\n    lanes: LANES,\r\n    numberOfLanes: 10,\r\n  } as Pool);\r\n  const [poolForm, setPoolForm] = useState({\r\n    first: \"Temp\",\r\n    last: \"Temp\",\r\n    time: new Date(),\r\n    chlorine: 0,\r\n    ph: 0,\r\n    totalSwimmers: 0,\r\n    temperature: 0,\r\n  } as PoolForm);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header> {/** JSON.stringify(pool) **/}</header>\r\n      <PoolNavbar></PoolNavbar>\r\n      <Row>\r\n        <Col>\r\n          <PoolViewer pool={pool} setPool={setPool}></PoolViewer>\r\n        </Col>\r\n        <Col>\r\n          <Dashboard\r\n            pool={pool}\r\n            poolForm={poolForm}\r\n            setPoolForm={setPoolForm}\r\n          ></Dashboard>\r\n        </Col>\r\n      </Row>\r\n      <a href=\"schedule\">\r\n        <PoolSchedule></PoolSchedule>\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}